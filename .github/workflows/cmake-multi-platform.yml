# Based on starter GitHub workflow

on:
  push:
    branches: [ "master", "next" ]
  pull_request:
env:
    VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        vulkan-version: [1.3.250.1]
        include:
          - os: windows-latest
            preset: Windows-Devel
          - os: ubuntu-latest
            preset: linux-clang
    steps:
    - uses: actions/checkout@v4
    - name: Export GitHub Actions cache environment variables
      uses: actions/github-script@v7
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
    - name: Install Vulkan SDK
      uses: humbletim/install-vulkan-sdk@c2aa128094d42ba02959a660f03e0a4e012192f9
      with:
        version: ${{ matrix.vulkan-version }}
        cache: true
    - name: Set up Linux libraries and environment
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        sudo apt-get -qq update
        sudo apt-get -qq install libxcb1-dev
        sudo apt-get -qq install llvm
        sudo apt-get -qq install libx11-dev
        sudo apt-get -qq install libxrandr-dev
        echo "VCPKG_ROOT=$VCPKG_INSTALLATION_ROOT" >> "$GITHUB_ENV"
    - name: Set up Windows environment
      if: startsWith(matrix.os, 'windows')
      run: |
        echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        cmake --preset=${{ matrix.preset }} -B ${{ steps.strings.outputs.build-output-dir }}
    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}
